// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Group models removed - using Employee model only

model Employee {
  id                String    @id @default(cuid()) @map("id")
  sid               String?   @unique @map("sid") // SID from HR data
  erp_id            String?   @map("erp_id") // ERPID from HR data
  first_name        String    @map("first_name")
  last_name         String    @map("last_name")
  email             String    @unique @map("email")
  job_code          String?   @map("job_code") // JobCode from HR data
  job_title         String?   @map("job_title")
  division          String?   @map("division") // Division from HR data
  unit              String?   @map("unit") // Unit from HR data
  department        String?   @map("department")
  section           String?   @map("section") // Section from HR data
  sub_section       String?   @map("sub_section") // Sub Section from HR data
  position_remark   String?   @map("position_remark") // Position Remark from HR data
  grade             String?   @map("grade") // Grade from HR data
  location          String?   @map("location") // Location from HR data
  photo_url         String?   @map("photo_url") // Path to employee photo
  line_manager_sid  String?   @map("line_manager_sid") // SID of the line manager
  is_active         Boolean   @default(true) @map("is_active")
  employment_status String    @default("ACTIVE") @map("employment_status")
  employment_type   String?   @map("employment_type")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  
  // Relations
  competencyAssessments CompetencyAssessment[]
  employeeAssessments EmployeeAssessment[]
  
  // Self-referencing relationship for line manager
  lineManager       Employee? @relation("LineManager", fields: [line_manager_sid], references: [sid])
  directReports     Employee[] @relation("LineManager")
  
  @@map("employees")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  CONSULTANT
  TEMPORARY
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  SUSPENDED
}

enum EmployeeType {
  REGULAR
  CONTRACTOR
  INTERN
  TEMPORARY
  CONSULTANT
}

enum PayFrequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

model Competency {
  id                String    @id @default(cuid())
  name              String    @unique
  type              CompetencyType
  family            String    // e.g., Finance, HR, Technical Services
  definition        String
  description       String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  levels            CompetencyLevel[]
  documents         CompetencyDocument[]
  assessments       CompetencyAssessment[]
  jobCompetencies   JobCompetency[]
  questions         Question[]
  assessments_new   Assessment[]
  
  @@map("competencies")
}

model CompetencyLevel {
  id                String    @id @default(cuid())
  competencyId      String
  level             CompetencyLevelType
  title             String    // e.g., "Basic", "Intermediate", "Advanced", "Mastery"
  description       String    // Detailed description/indicators for this level
  indicators        String[]  // Array of specific indicators
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  competency        Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  assessments       CompetencyAssessment[]
  questions         Question[]
  assessments_new   Assessment[]
  
  @@unique([competencyId, level])
  @@map("competency_levels")
}

model CompetencyDocument {
  id                String    @id @default(cuid())
  competencyId      String
  title             String
  description       String?
  fileName          String
  originalFileName  String
  filePath          String
  fileSize          Int
  mimeType          String
  documentType      DocumentType
  version           String?   @default("1.0")
  isActive          Boolean   @default(true)
  uploadedBy        String?   // User ID who uploaded
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  competency        Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  
  @@map("competency_documents")
}

model CompetencyAssessment {
  id                String    @id @default(cuid())
  employeeId        String
  competencyId      String
  levelId           String
  assessedBy        String?   // User ID who assessed
  assessmentDate    DateTime  @default(now())
  status            AssessmentStatus @default(PENDING)
  notes             String?
  evidence          String?   // Evidence or proof of competency
  validUntil        DateTime? // When this assessment expires
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  competency        Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  level             CompetencyLevel @relation(fields: [levelId], references: [id], onDelete: Cascade)
  
  @@map("competency_assessments")
}

enum CompetencyType {
  TECHNICAL
  NON_TECHNICAL
  BEHAVIORAL
  LEADERSHIP
  FUNCTIONAL
}

enum CompetencyLevelType {
  BASIC
  INTERMEDIATE
  ADVANCED
  MASTERY
}

enum DocumentType {
  SOP
  MANUAL
  GUIDELINE
  PROCEDURE
  REFERENCE
  TRAINING_MATERIAL
  POLICY
  OTHER
}

enum AssessmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
  EXPIRED
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  VIEWER
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String   @unique
  unit        String?
  division    String?
  department  String?
  section     String?
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationship with competencies
  jobCompetencies JobCompetency[]

  @@map("jobs")
}

model JobCompetency {
  id            String           @id @default(cuid())
  jobId         String
  competencyId  String
  requiredLevel CompetencyLevelType
  isRequired    Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Relationships
  job         Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  competency  Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  // Ensure unique job-competency combinations
  @@unique([jobId, competencyId])
  @@map("job_competencies")
}

model JobCriticalityCriteria {
  id          Int      @id @default(autoincrement())
  name        String   @map("name")
  definition  String   @default("") @map("definition")
  weight      Int      @default(0) @map("weight")
  icon        String   @map("icon")
  color       String   @map("color")
  min_rating  Int      @default(1) @map("min_rating")
  max_rating  Int      @default(5) @map("max_rating")
  is_active   Boolean  @default(true) @map("is_active")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  @@map("job_criticality_criteria")
}

// Assessment System Models

model Assessment {
  id                String    @id @default(cuid())
  title             String
  description       String?
  competencyId      String
  competencyLevelId String?   // Target level for this assessment
  isActive          Boolean   @default(true)
  timeLimit         Int?      // Time limit in minutes (optional)
  passingScore      Float     @default(70.0) // Passing percentage
  maxAttempts       Int?      // Maximum attempts allowed (null = unlimited)
  createdBy         String?   // Employee SID who created
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  competency        Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  competencyLevel   CompetencyLevel? @relation(fields: [competencyLevelId], references: [id], onDelete: SetNull)
  questions         AssessmentQuestion[]
  attempts          EmployeeAssessment[]
  
  @@map("assessments")
}

model Question {
  id                String    @id @default(cuid())
  text              String    // Question text
  type              QuestionType
  competencyId      String
  competencyLevelId String?   // Difficulty level (linked to competency level)
  points            Int       @default(1) // Points for correct answer
  explanation       String?   // Explanation for the answer
  isActive          Boolean   @default(true)
  createdBy         String?   // Employee SID who created
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  competency        Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  competencyLevel   CompetencyLevel? @relation(fields: [competencyLevelId], references: [id], onDelete: SetNull)
  options           QuestionOption[]
  assessmentQuestions AssessmentQuestion[]
  responses         EmployeeResponse[]
  
  @@map("questions")
}

model QuestionOption {
  id          String    @id @default(cuid())
  questionId  String
  text        String    // Option text
  isCorrect   Boolean   @default(false)
  order       Int       @default(0) // Display order
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses   EmployeeResponse[]
  
  @@map("question_options")
}

model AssessmentQuestion {
  id           String    @id @default(cuid())
  assessmentId String
  questionId   String
  order        Int       @default(0) // Question order in assessment
  points       Int       @default(1) // Points for this question in this assessment
  createdAt    DateTime  @default(now())
  
  // Relations
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@unique([assessmentId, questionId])
  @@map("assessment_questions")
}

model EmployeeAssessment {
  id                String    @id @default(cuid())
  employeeId        String
  assessmentId      String
  status            AssessmentAttemptStatus @default(NOT_STARTED)
  score             Float?    // Final score percentage
  maxScore          Float?    // Maximum possible score
  timeSpent         Int?      // Time spent in seconds
  startedAt         DateTime?
  completedAt       DateTime?
  evaluatedLevel    CompetencyLevelType? // System evaluated level
  managerApproved   Boolean   @default(false)
  assessorApproved  Boolean   @default(false)
  managerNotes      String?
  assessorNotes     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  responses         EmployeeResponse[]
  
  @@unique([employeeId, assessmentId])
  @@map("employee_assessments")
}

model EmployeeResponse {
  id                    String    @id @default(cuid())
  employeeAssessmentId  String
  questionId            String
  selectedOptionId      String?   // For multiple choice questions
  textResponse          String?   // For text-based questions
  isCorrect             Boolean?  // Whether the response is correct
  pointsEarned          Float     @default(0) // Points earned for this response
  timeSpent             Int?      // Time spent on this question in seconds
  createdAt             DateTime  @default(now())
  
  // Relations
  employeeAssessment    EmployeeAssessment @relation(fields: [employeeAssessmentId], references: [id], onDelete: Cascade)
  question              Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption        QuestionOption? @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)
  
  @@unique([employeeAssessmentId, questionId])
  @@map("employee_responses")
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  TEXT_INPUT
  RATING_SCALE
}

enum AssessmentAttemptStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIME_EXCEEDED
}
